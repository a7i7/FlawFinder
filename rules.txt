START_RULE
execl|execlp|execle|execv|execvp|system|popen|WinExec|ShellExecute
normal
4
This causes a new program to execute and is difficult to use safely (CWE-78)
try using a library call that implements the same functionality if available
shell

{}
END_RULE
START_RULE
tmpfile
normal
2
Function tmpfile() has a security flaw on some systems (e.g., older System V systems) (CWE-377)

tmpfile

{}
END_RULE
START_RULE
fscanf|sscanf|vsscanf|vfscanf|_ftscanf|fwscanf|vfwscanf|vswscanf
c_scanf
4
The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20)
Specify a limit to %s, or use a different input function
buffer

{'input': 1, 'format_position': 2}
END_RULE
START_RULE
char|TCHAR|wchar_t
c_static_array
2
Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119:CWE-120)
Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length
buffer

{'extract_lookahead': 1}
END_RULE
START_RULE
tmpnam|tempnam
normal
3
Temporary file race condition (CWE-377)

tmpfile
avoid-race
{}
END_RULE
START_RULE
sprintf|vsprintf|swprintf|vswprintf|_stprintf|_vstprintf
c_sprintf
4
Does not check for buffer overflows (CWE-120)
Use sprintf_s, snprintf, or vsnprintf
buffer

{}
END_RULE
START_RULE
scanf|vscanf|wscanf|_tscanf|vwscanf
c_scanf
4
The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20)
Specify a limit to %s, or use a different input function
buffer

{'input': 1}
END_RULE
START_RULE
mktemp
normal
4
Temporary file race condition (CWE-377)

tmpfile
avoid-race
{}
END_RULE
START_RULE
strcat
c_buffer
4
Does not check for buffer overflows when concatenating to destination (CWE-120)
Consider using strcat_s, strncat, or strlcat (warning, strncat is easily misused)
buffer

{}
END_RULE
START_RULE
chmod
normal
5
This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362)
Use fchmod( ) instead
race

{}
END_RULE
START_RULE
EVP_des_ecb|EVP_des_cbc|EVP_des_cfb|EVP_des_ofb|EVP_desx_cbc
normal
4
DES only supports a 56-bit keysize, which is too small given today's computers (CWE-327)
Use a different patent-free encryption algorithm with a larger keysize, such as 3DES or AES
crypto

{}
END_RULE
START_RULE
getpass
normal
4
This function is obsolete and not portable. It was in SUSv2 but removed by POSIX.2.  What it does exactly varies considerably between systems, particularly in where its prompt is displayed and where it gets its data (e.g., /dev/tty, stdin, stderr, etc.) (CWE-676)
Make the specific calls to do exactly what you want.  If you continue to use it, or write your own, be sure to zero the password as soon as possible to avoid leaving the cleartext password visible in the process' address space
misc

{}
END_RULE
START_RULE
syslog
c_printf
4
If syslog's format strings can be influenced by an attacker, they can be exploited (CWE-134)
Use a constant format string for syslog
format

{'format_position': 2}
END_RULE
START_RULE
lstrcat|wcscat|_tcscat|_mbscat
c_buffer
4
Does not check for buffer overflows when concatenating to destination (CWE-120)

buffer

{}
END_RULE
START_RULE
CreateProcessAsUser|CreateProcessWithLogon
normal
3
This causes a new process to execute and is difficult to use safely (CWE-78)
Especially watch out for embedded spaces
shell

{}
END_RULE
START_RULE
snprintf|vsnprintf|_snprintf|_sntprintf|_vsntprintf
c_printf
4
If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134)
Use a constant for the format specification
format

{'format_position': 3}
END_RULE
START_RULE
getchar|fgetc|getc|read|_gettc
normal
1
Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20)

buffer
dangers-c
{'input': 1}
END_RULE
START_RULE
SetSecurityDescriptorDacl
c_hit_if_null
5
Never create NULL ACLs; an attacker can set it to Everyone (Deny All Access), which would even forbid administrator access (CWE-732)

misc

{'check_for_null': 3}
END_RULE
START_RULE
strncpy
c_buffer
1
Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers (CWE-120)

buffer

{}
END_RULE
START_RULE
strncat
c_strncat
1
Easily used incorrectly (e.g., incorrectly computing the correct maximum size to add) (CWE-120)
Consider strcat_s, strlcat, or automatically resizing strings
buffer

{}
END_RULE
START_RULE
chroot
normal
3
chroot can be very helpful, but is hard to use correctly (CWE-250, CWE-22)
Make sure the program immediately chdir("/"), closes file descriptors, and drops root privileges, and that all necessary files (and no more!) are in the new root
misc

{}
END_RULE
START_RULE
strccpy|strcadd
normal
1
Subject to buffer overflow if buffer is not as big as claimed (CWE-120)
Ensure that destination buffer is sufficiently large
buffer

{}
END_RULE
START_RULE
EnterCriticalSection
normal
3
On some versions of Windows, exceptions can be thrown in low-memory situations
Use InitializeCriticalSectionAndSpinCount instead
misc

{}
END_RULE
START_RULE
LoadLibrary|LoadLibraryEx
normal
3
Ensure that the full path to the library is specified, or current directory may be used (CWE-829, CWE-20)
Use registry entry or GetWindowsDirectory to find library path, if you aren't already
misc

{'input': 1}
END_RULE
START_RULE
ulimit
normal
1
This C routine is considered obsolete (as opposed to the shell command by the same name, which is NOT obsolete) (CWE-676)
Use getrlimit(2), setrlimit(2), and sysconf(3) instead
obsolete

{}
END_RULE
START_RULE
crypt
normal
4
Function crypt is a poor one-way hashing algorithm; since it only accepts passwords of 8 characters or less, and only a two-byte salt, it is excessively vulnerable to dictionary attacks given today's faster computing equipment (CWE-327)
Use a different algorithm, such as SHA-1, with a larger non-repeating salt
crypto

{}
END_RULE
START_RULE
drand48|erand48|jrand48|lcong48|lrand48|mrand48|nrand48|random|seed48|setstate|srand|strfry|srandom
normal
3
This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327)
use a more secure technique for acquiring random values
random

{}
END_RULE
START_RULE
umask
normal
1
Ensure that umask is given most restrictive possible setting (e.g., 066 or 077) (CWE-732)

access

{}
END_RULE
START_RULE
memcpy|CopyMemory|bcopy
normal
2
Does not check for buffer overflows when copying to destination (CWE-120)
Make sure destination can always hold the source data
buffer

{}
END_RULE
START_RULE
CreateProcess
c_hit_if_null
3
This causes a new process to execute and is difficult to use safely (CWE-78)
Specify the application path in the first argument, NOT as part of the second, or embedded spaces could allow an attacker to force a different program to run
shell

{'check_for_null': 1}
END_RULE
START_RULE
chgrp
normal
5
This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362)
Use fchgrp( ) instead
race

{}
END_RULE
START_RULE
access
normal
4
This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367)
Set up the correct permissions (e.g., using setuid()) and try to open the file directly
race
avoid-race#atomic-filesystem
{}
END_RULE
START_RULE
lstrcatn|wcsncat|_tcsncat|_mbsnbcat
c_strncat
1
Easily used incorrectly (e.g., incorrectly computing the correct maximum size to add) (CWE-120)
Consider strcat_s, strlcat, or automatically resizing strings
buffer

{}
END_RULE
START_RULE
MultiByteToWideChar
c_multi_byte_to_wide_char
2
Requires maximum length in CHARACTERS, not bytes (CWE-120)

buffer

{}
END_RULE
START_RULE
g_get_home_dir
normal
3
This function is synonymous with 'getenv("HOME")';it returns untrustable input if the environment can beset by an attacker.  It can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20)
Check environment variables carefully before using them
buffer

{'input': 1}
END_RULE
START_RULE
lstrcpy|wcscpy|_tcscpy|_mbscpy
c_buffer
4
Does not check for buffer overflows when copying to destination (CWE-120)
Consider using a function version that stops copying at the end of the buffer
buffer

{}
END_RULE
START_RULE
getopt|getopt_long
normal
3
Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20)
Check implementation on installation, or limit the size of all string inputs
buffer
dangers-c
{'input': 1}
END_RULE
START_RULE
AddAccessAllowedAce
normal
3
This doesn't set the inheritance bits in the access control entry (ACE) header (CWE-732)
Make sure that you set inheritance by hand if you wish it to inherit
misc

{}
END_RULE
START_RULE
mkstemp
normal
2
Potential for temporary file vulnerability in some circumstances.  Some older Unix-like systems create temp files with permission to write by all by default, so be sure to set the umask to override this. Also, some older Unix systems might fail to use O_EXCL when opening the file, so make sure that O_EXCL is used by the library (CWE-377)

tmpfile
avoid-race
{}
END_RULE
START_RULE
lstrcpyn|wcsncpy|_tcsncpy|_mbsnbcpy
c_buffer
1
Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers (CWE-120)

buffer

{}
END_RULE
START_RULE
getlogin
normal
4
It's often easy to fool getlogin.  Sometimes it does not work at all, because some program messed up the utmp file.  Often, it gives only the first 8 characters of the login name. The user currently logged in on the controlling tty of our program need not be the user who started it.  Avoid getlogin() for security-related purposes (CWE-807)
Use getpwuid(geteuid()) and extract the desired information instead
misc

{}
END_RULE
START_RULE
getenv|curl_getenv
normal
3
Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20)
Check environment variables carefully before using them
buffer

{'input': 1}
END_RULE
START_RULE
EVP_rc4_40|EVP_rc2_40_cbc|EVP_rc2_64_cbc
normal
4
These keysizes are too small given today's computers (CWE-327)
Use a different patent-free encryption algorithm with a larger keysize, such as 3DES or AES
crypto

{}
END_RULE
START_RULE
realpath
normal
3
This function does not protect against buffer overflows, and some implementations can overflow internally (CWE-120/CWE-785)
Ensure that the destination buffer is at least of size MAXPATHLEN, andto protect against implementation problems, the input argument should also be checked to ensure it is no larger than MAXPATHLEN
buffer
dangers-c
{}
END_RULE
START_RULE
RpcImpersonateClient|ImpersonateLoggedOnUser|CoImpersonateClient|ImpersonateNamedPipeClient|ImpersonateDdeClientWindow|ImpersonateSecurityContext|SetThreadToken
normal
4
If this call fails, the program could fail to drop heightened privileges (CWE-250)
Make sure the return value is checked, and do not continue if a failure is reported
access

{}
END_RULE
START_RULE
g_get_tmp_dir
normal
3
This function is synonymous with 'getenv("TMP")';it returns untrustable input if the environment can beset by an attacker.  It can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20)
Check environment variables carefully before using them
buffer

{'input': 1}
END_RULE
START_RULE
getpw
normal
4
This function is dangerous; it may overflow the provided buffer. It extracts data from a 'protected' area, but most systems have many commands to let users modify the protected area, and it's not always clear what their limits are.  Best to avoid using this function altogether (CWE-676, CWE-120)
Use getpwuid() instead
buffer

{}
END_RULE
START_RULE
streadd|strecpy
normal
4
This function does not protect against buffer overflows (CWE-120)
Ensure the destination has 4 times the size of the source, to leave room for expansion
buffer
dangers-c
{}
END_RULE
START_RULE
printf|vprintf|vwprintf|vfwprintf|_vtprintf|wprintf
c_printf
4
If format strings can be influenced by an attacker, they can be exploited (CWE-134)
Use a constant for the format specification
format

{}
END_RULE
START_RULE
strtrns
normal
3
This function does not protect against buffer overflows (CWE-120)
Ensure that destination is at least as long as the source
buffer
dangers-c
{}
END_RULE
START_RULE
readlink
normal
5
This accepts filename arguments; if an attacker can move those files or change the link content, a race condition results.  Also, it does not terminate with ASCII NUL. (CWE-362, CWE-20)
Reconsider approach
race

{'input': 1}
END_RULE
START_RULE
usleep
normal
1
This C routine is considered obsolete (as opposed to the shell command by the same name).   The interaction of this function with SIGALRM and other timer functions such as sleep(), alarm(), setitimer(), and nanosleep() is unspecified (CWE-676)
Use nanosleep(2) or setitimer(2) instead
obsolete

{}
END_RULE
START_RULE
recv|recvfrom|recvmsg|fread|readv
normal
0
Function accepts input from outside program (CWE-20)
Make sure input data is filtered, especially if an attacker could manipulate it
input

{'input': 1}
END_RULE
START_RULE
gsignal|ssignal
normal
2
These functions are considered obsolete on most systems, and very non-poertable (Linux-based systems handle them radically different, basically if gsignal/ssignal were the same as raise/signal respectively, while System V considers them a separate set and obsolete) (CWE-676)
Switch to raise/signal, or some other signalling approach
obsolete

{}
END_RULE
START_RULE
memalign
normal
1
On some systems (though not Linux-based systems) an attempt to free() results from memalign() may fail. This may, on a few systems, be exploitable.  Also note that memalign() may not check that the boundary parameter is correct (CWE-676)
Use posix_memalign instead (defined in POSIX's 1003.1d).  Don't switch to valloc(); it is marked as obsolete in BSD 4.3, as legacy in SUSv2, and is no longer defined in SUSv3.  In some cases, malloc()'s alignment may be sufficient
free

{}
END_RULE
START_RULE
getwd
normal
3
This does not protect against buffer overflows by itself, so use with caution (CWE-120, CWE-20)
Use getcwd instead
buffer
dangers-c
{'input': 1}
END_RULE
START_RULE
GetTempFileName
normal
3
Temporary file race condition in certain cases (e.g., if run as SYSTEM in many versions of Windows) (CWE-377)

tmpfile
avoid-race
{}
END_RULE
START_RULE
gets|_getts
normal
5
Does not check for buffer overflows (CWE-120, CWE-20)
Use fgets() instead
buffer

{'input': 1}
END_RULE
START_RULE
cuserid
normal
4
Exactly what cuserid() does is poorly defined (e.g., some systems use the effective uid, like Linux, while others like System V use the real uid). Thus, you can't trust what it does. It's certainly not portable (The cuserid function was included in the 1988 version of POSIX, but removed from the 1990 version).  Also, if passed a non-null parameter, there's a risk of a buffer overflow if the passed-in buffer is not at least L_cuserid characters long (CWE-120)
Use getpwuid(geteuid()) and extract the desired information instead
misc

{}
END_RULE
START_RULE
strlen|wcslen|_tcslen|_mbslen
normal
1
Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126)

buffer

{}
END_RULE
START_RULE
atoi|atol|_wtoi|_wtoi64
normal
2
Unless checked, the resulting number can exceed the expected range (CWE-190)
If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended)
integer
dangers-c
{}
END_RULE
START_RULE
InitializeCriticalSection
normal
3
Exceptions can be thrown in low-memory situations
Use InitializeCriticalSectionAndSpinCount instead
misc

{}
END_RULE
START_RULE
fprintf|vfprintf|_ftprintf|_vftprintf|fwprintf|fvwprintf
c_printf
4
If format strings can be influenced by an attacker, they can be exploited (CWE-134)
Use a constant for the format specification
format

{'format_position': 2}
END_RULE
START_RULE
chown
normal
5
This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362)
Use fchown( ) instead
race

{}
END_RULE
START_RULE
strcpy
c_buffer
4
Does not check for buffer overflows when copying to destination (CWE-120)
Consider using strcpy_s, strncpy, or strlcpy (warning, strncpy is easily misused)
buffer

{}
END_RULE
START_RULE
fopen|open
normal
2
Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362)

misc

{}
END_RULE
START_RULE
vfork
normal
2
On some old systems, vfork() permits race conditions, and it's very difficult to use correctly (CWE-362)
Use fork() instead
race

{}
END_RULE
